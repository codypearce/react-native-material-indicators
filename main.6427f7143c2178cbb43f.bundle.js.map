{"version":3,"file":"main.6427f7143c2178cbb43f.bundle.js","sources":["webpack:///./src/ProgressBar/ProgressBar.js"],"sourcesContent":["import PropTypes from \"prop-types\";\nimport React, { PureComponent } from \"react\";\nimport { Animated, Easing } from \"react-native\";\nimport styles from \"./ProgressBar.styles\";\nimport { default as colorTool } from \"color\";\n\nexport default class ProgressBar extends PureComponent {\n  static propTypes = {\n    color: PropTypes.string,\n    height: PropTypes.number,\n    trackStyle: PropTypes.object,\n    determinate: PropTypes.bool,\n    indcatorStartPosition: PropTypes.number,\n    easing: PropTypes.func,\n    animationDuration: PropTypes.number,\n    value: PropTypes.number,\n    visible: PropTypes.bool,\n    style: PropTypes.object\n  };\n\n  static defaultProps = {\n    animationDuration: 1000,\n    indcatorStartPosition: 0,\n    easing: Easing.bezier(0.65, 0.815, 0.735, 0.395),\n    color: \"#2196F3\"\n  };\n\n  state = {\n    indicatorPosition: new Animated.Value(this.props.indcatorStartPosition),\n    indicatorScaleX: new Animated.Value(1),\n    indicatorWidth: new Animated.Value(0),\n    trackScaleY: new Animated.Value(0),\n    trackOpacity: new Animated.Value(0),\n    trackHeight: 0,\n    trackWidth: 0\n  };\n\n  componentDidMount() {\n    const { visible, determinate } = this.props;\n    if (visible) {\n      this.animateTrackHeight();\n    }\n    if (determinate) {\n      this.startDeterminateAnimation();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { value, visible, determinate } = this.props;\n\n    if (value != prevProps.value && determinate) {\n      this.startDeterminateAnimation();\n    }\n\n    if ((visible && !prevProps.visible) || (!visible && prevProps.visible)) {\n      this.animateTrackHeight();\n    }\n  }\n\n  animateTrackHeight() {\n    const { trackScaleY, trackOpacity } = this.state;\n    const { visible, determinate } = this.props;\n    let scale = visible ? 1 : 0;\n    let opacity = visible ? 1 : 0;\n\n    Animated.parallel([\n      Animated.timing(trackScaleY, {\n        toValue: scale,\n        duration: 300\n      }),\n      Animated.timing(trackOpacity, {\n        toValue: opacity,\n        duration: 300\n      })\n    ]).start(() => {\n      if (determinate) {\n        this.startDeterminateAnimation();\n      } else {\n        this.startIndeterminateAnimation();\n      }\n    });\n  }\n\n  startDeterminateAnimation() {\n    const { indicatorWidth, trackWidth } = this.state;\n    const { animationDuration, value } = this.props;\n    if (trackWidth == 0) {\n      setTimeout(() => this.startDeterminateAnimation(), 100);\n    }\n    Animated.parallel([\n      Animated.timing(indicatorWidth, {\n        toValue: trackWidth * (value / 100),\n        duration: animationDuration\n      })\n    ]).start();\n  }\n\n  startIndeterminateAnimation() {\n    const { indicatorPosition, indicatorScaleX, trackWidth } = this.state;\n    const { animationDuration, easing } = this.props;\n    if (trackWidth == 0) {\n      setTimeout(() => this.startIndeterminateAnimation(), 100);\n    }\n    Animated.loop(\n      Animated.parallel([\n        Animated.timing(indicatorPosition, {\n          toValue: trackWidth,\n          duration: animationDuration,\n          easing\n        }),\n        Animated.timing(indicatorScaleX, {\n          toValue: 2,\n          duration: animationDuration / 4,\n          easing\n        })\n      ]),\n\n      {\n        iterations: -1\n      }\n    ).start();\n  }\n\n  onTrackLayout = e => {\n    const { width, height } = e.nativeEvent.layout;\n\n    this.setState({\n      trackWidth: width,\n      trackHeight: height\n    });\n  };\n\n  render() {\n    const { height, color, trackStyle, determinate } = this.props;\n    const {\n      indicatorPosition,\n      indicatorScaleX,\n      indicatorWidth,\n      trackScaleY,\n      trackOpacity\n    } = this.state;\n\n    const trackColor = colorTool(color)\n      .fade(0.4)\n      .string();\n    const indicatorColor = color;\n\n    return (\n      <Animated.View\n        onLayout={this.onTrackLayout}\n        style={[\n          styles.track,\n          {\n            backgroundColor: trackColor,\n            height: height ? height : 4,\n            opacity: trackOpacity,\n            transform: [{ scaleY: trackScaleY }]\n          },\n          trackStyle\n        ]}\n      >\n        <Animated.View\n          style={[\n            styles.indicator,\n            {\n              backgroundColor: indicatorColor,\n              height: height ? height : 4,\n              width: determinate ? indicatorWidth : 112,\n              transform: [\n                { translateX: indicatorPosition },\n                { scaleX: indicatorScaleX }\n              ]\n            }\n          ]}\n        />\n      </Animated.View>\n    );\n  }\n}\n"],"mappings":"AAAA","sourceRoot":""}